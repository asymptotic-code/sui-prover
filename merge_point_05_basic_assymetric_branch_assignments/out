    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s
     Running `/Users/rvt/asymptotic/sui-prover/target/debug/sui-prover --path /Users/rvt/asymptotic/sui-prover/merge_05_mix_var_changes --verbose --dump-bytecode --keep-temp --boogie-file-mode function`
Processing function my_ssa_test::conditional_max for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [9, 10, 11, 12, 13, 14]
  Block 3: PCs [15, 16, 17, 18, 19, 20, 21, 22, 23]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6, 7, 8]
  Block 5: PCs [24, 25, 26, 27]
True branch: 2, False branch: 3
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [24, 25, 26, 27]
Found 1 simple conditionals
Available annotations:
  LiveVarAnnotation: true
  ReachingDefAnnotation: true
Found deterministic convergence point at PC 24 for variable 2 with 2 definitions
Merge point PC: Some(24) -> Convergence: Some(24)
Live variables at merge point: {2, 3}
Live variables at original PC 24: {2, 3}
Live variables at convergence PC 24: {2, 3}
Reaching definitions state at PC 24: ReachingDefState { map: {2: {Alias(8, 12), Alias(10, 18)}, 3: {Alias(5, 5), Alias(12, 22)}}, havoced: {} }
Variable 2 has 2 reaching definitions: {Alias(8, 12), Alias(10, 18)}
Analyzing def at PC 12 in block 2 -> temp 8
Examining bytecode at PC 12: Assign(AttrId(12), 2, 8, Store)
True branch value: temp 8
Analyzing def at PC 18 in block 3 -> temp 10
Examining bytecode at PC 18: Assign(AttrId(18), 2, 10, Store)
False branch value: temp 10
Branch values - True: Some(8), False: Some(10)
Variable 3 has 2 reaching definitions: {Alias(5, 5), Alias(12, 22)}
Analyzing def at PC 5 in block 4 -> temp 5
Examining bytecode at PC 5: Assign(AttrId(3), 3, 5, Store)
Fallthrough value: temp 5
Analyzing def at PC 22 in block 3 -> temp 12
Examining bytecode at PC 22: Assign(AttrId(22), 3, 12, Store)
False branch value: temp 12
Branch values - True: None, False: Some(12)
Variables to merge: [VariableToMerge { variable: 2, condition: 6, true_value: 8, false_value: 10, merge_point: 5 }]
About to insert 1 conditionals
Processing variable 2 for insertion
Created IfThenElse call: temp14 = if_then_else(temp6, temp8, temp10)
Inserting IfThenElse at merge point PC 24
Found label at PC 24, inserting if_then_else after it at position 25
Replaced variable 2 with 14 at PC 26: Call(AttrId(26), [13], Add, [2, 3], None) -> Call(AttrId(26), [13], Add, [14, 3], None)
Replaced variable 2 with 14 at PC 27: Call(AttrId(34), [], TraceReturn(0), [13], None) -> Call(AttrId(34), [], TraceReturn(0), [13], None)
Replaced variable 2 with 14 at PC 28: Ret(AttrId(27), [13]) -> Ret(AttrId(27), [13])
Successfully inserted conditional for variable 2
Conditional merge insertion completed for my_ssa_test::conditional_max
Processing function integer::shl for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function integer::shr for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::uid_to_inner for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::uid_to_address for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::uid_as_inner for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::sui_deny_list_object_id for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::sui_accumulator_root_object_id for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::sui_accumulator_root_address for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::randomness_state for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::new_uid_from_hash for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::id_to_address for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::id_from_address for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::delete for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::clock for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::bridge for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::id_address for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::id for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::borrow_id for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::authenticator_state for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::id_from_bytes for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::reference_gas_price for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::last_created_object_id for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::last_created for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::fresh_object_address for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::digest for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::gas_budget for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::gas_price for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::ids_created for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::get_ids_created for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::epoch_timestamp_ms for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::increment_epoch_timestamp for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::epoch for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::increment_epoch_number for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::sender for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::sui_system_state for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [5, 6]
  Block 3: PCs [7, 8, 9, 10]
  Block 4: PCs [0, 1, 2, 3, 4]
  Block 5: PCs [11, 12, 13, 14, 15, 16]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function object::uid_to_bytes for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::id_to_bytes for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::id_bytes for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::to_vec for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::dummy_tx_hash_with_hint for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [3, 4, 5, 6, 7, 8]
  Block 3: PCs [0, 1, 2]
  Block 4: PCs [9, 10, 11, 12, 13, 14]
  Block 5: PCs [15, 16, 17, 18]
True branch: 4, False branch: 5
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [15, 16, 17, 18]
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::create for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [13, 14]
  Block 3: PCs [15, 16, 17, 18]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
  Block 5: PCs [19, 20, 21, 22, 23, 24, 25, 26, 27, 28]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::swap_remove for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8]
  Block 3: PCs [9, 10, 11, 12, 13]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::reverse for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9, 10]
  Block 3: PCs [11, 12, 13, 14, 15, 16, 17, 18]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [19, 20, 21]
  Block 6: PCs [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
  Block 7: PCs [33, 34, 35, 36]
True branch: 2, False branch: 3
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9, 10]
  Block 3: PCs [11, 12, 13, 14, 15, 16, 17, 18]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [19, 20, 21]
  Block 6: PCs [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]
  Block 7: PCs [33, 34, 35, 36]
True branch: 6, False branch: 7
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::remove for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9, 10, 11]
  Block 3: PCs [12, 13, 14, 15]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [16, 17, 18]
  Block 6: PCs [19, 20, 21, 22, 23, 24, 25, 26]
  Block 7: PCs [27, 28, 29, 30, 31]
True branch: 2, False branch: 3
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9, 10, 11]
  Block 3: PCs [12, 13, 14, 15]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [16, 17, 18]
  Block 6: PCs [19, 20, 21, 22, 23, 24, 25, 26]
  Block 7: PCs [27, 28, 29, 30, 31]
True branch: 6, False branch: 7
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::is_empty for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::is_some for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::extract for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [4, 5]
  Block 3: PCs [6, 7, 8, 9, 10]
  Block 4: PCs [0, 1, 2, 3]
  Block 5: PCs [11, 12, 13, 14, 15, 16]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function option::swap for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [5, 6]
  Block 3: PCs [7, 8, 9, 10, 11]
  Block 4: PCs [0, 1, 2, 3, 4]
  Block 5: PCs [12, 13, 14, 15, 16, 17, 18, 19, 20]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function option::is_none for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::fill for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8]
  Block 3: PCs [18, 19, 20]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [14, 15, 16, 17]
  Block 6: PCs [9, 10, 11, 12, 13]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function option::destroy_with_default for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9]
  Block 3: PCs [10, 11, 12]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [13, 14, 15]
True branch: 2, False branch: 3
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [13, 14, 15]
Found 1 simple conditionals
Available annotations:
  LiveVarAnnotation: true
  ReachingDefAnnotation: true
Merge point PC: Some(13) -> Convergence: Some(13)
Live variables at merge point: {2}
Live variables at original PC 13: {2}
Live variables at convergence PC 13: {2}
Reaching definitions state at PC 13: ReachingDefState { map: {}, havoced: {} }
Variables to merge: []
Conditional merge insertion completed for option::destroy_with_default
Processing function vector::insert for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [8, 9, 10, 11, 12]
  Block 3: PCs [13, 14]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6, 7]
  Block 5: PCs [15, 16, 17]
  Block 6: PCs [18, 19, 20, 21, 22, 23, 24]
  Block 7: PCs [25, 26, 27, 28]
True branch: 2, False branch: 3
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [8, 9, 10, 11, 12]
  Block 3: PCs [13, 14]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6, 7]
  Block 5: PCs [15, 16, 17]
  Block 6: PCs [18, 19, 20, 21, 22, 23, 24]
  Block 7: PCs [25, 26, 27, 28]
True branch: 6, False branch: 7
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function option::none for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function vector::take for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [6, 7]
  Block 3: PCs [8, 9, 10, 11]
  Block 4: PCs [0, 1, 2, 3, 4, 5]
  Block 5: PCs [12, 13, 14, 15, 16]
  Block 6: PCs [17, 18, 19, 20]
  Block 7: PCs [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
  Block 8: PCs [31, 32, 33]
  Block 9: PCs [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]
  Block 10: PCs [46, 47, 48, 49]
True branch: 2, False branch: 3
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [6, 7]
  Block 3: PCs [8, 9, 10, 11]
  Block 4: PCs [0, 1, 2, 3, 4, 5]
  Block 5: PCs [12, 13, 14, 15, 16]
  Block 6: PCs [17, 18, 19, 20]
  Block 7: PCs [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
  Block 8: PCs [31, 32, 33]
  Block 9: PCs [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]
  Block 10: PCs [46, 47, 48, 49]
True branch: 6, False branch: 7
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [6, 7]
  Block 3: PCs [8, 9, 10, 11]
  Block 4: PCs [0, 1, 2, 3, 4, 5]
  Block 5: PCs [12, 13, 14, 15, 16]
  Block 6: PCs [17, 18, 19, 20]
  Block 7: PCs [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
  Block 8: PCs [31, 32, 33]
  Block 9: PCs [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]
  Block 10: PCs [46, 47, 48, 49]
True branch: 9, False branch: 10
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::skip for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9, 10]
  Block 3: PCs [11, 12, 13, 14, 15, 16, 17, 18, 19]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [20, 21, 22]
  Block 6: PCs [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
  Block 7: PCs [35, 36, 37, 38, 39, 40, 41, 42, 43]
True branch: 2, False branch: 3
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9, 10]
  Block 3: PCs [11, 12, 13, 14, 15, 16, 17, 18, 19]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [20, 21, 22]
  Block 6: PCs [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]
  Block 7: PCs [35, 36, 37, 38, 39, 40, 41, 42, 43]
True branch: 6, False branch: 7
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::singleton for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::some for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::swap_or_fill for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9]
  Block 3: PCs [10, 11, 12]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 5: PCs [13, 14, 15, 16, 17, 18]
True branch: 2, False branch: 3
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [13, 14, 15, 16, 17, 18]
Found 1 simple conditionals
Available annotations:
  LiveVarAnnotation: true
  ReachingDefAnnotation: true
Merge point PC: Some(13) -> Convergence: Some(13)
Live variables at merge point: {0, 1, 2, 5}
Live variables at original PC 13: {0, 1, 2, 5}
Live variables at convergence PC 13: {0, 1, 2, 5}
Reaching definitions state at PC 13: ReachingDefState { map: {}, havoced: {} }
Variables to merge: []
Conditional merge insertion completed for option::swap_or_fill
Processing function option::destroy_some for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [3, 4]
  Block 3: PCs [5, 6, 7, 8]
  Block 4: PCs [0, 1, 2]
  Block 5: PCs [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function option::destroy_none for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [3, 4]
  Block 3: PCs [5, 6, 7, 8]
  Block 4: PCs [0, 1, 2]
  Block 5: PCs [9, 10, 11, 12]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::option_sponsor for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [6, 7, 8]
  Block 3: PCs [9, 10, 11, 12]
  Block 4: PCs [0, 1, 2, 3, 4, 5]
  Block 5: PCs [13, 14, 15]
True branch: 2, False branch: 3
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [13, 14, 15]
Found 1 simple conditionals
Available annotations:
  LiveVarAnnotation: true
  ReachingDefAnnotation: true
Merge point PC: Some(13) -> Convergence: Some(13)
Live variables at merge point: {0}
Live variables at original PC 13: {0}
Live variables at convergence PC 13: {0}
Reaching definitions state at PC 13: ReachingDefState { map: {}, havoced: {} }
Variables to merge: []
Conditional merge insertion completed for tx_context::option_sponsor
Processing function tx_context::new for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [9, 10]
  Block 3: PCs [11, 12, 13, 14]
  Block 4: PCs [0, 1, 2, 3, 4, 5, 6, 7, 8]
  Block 5: PCs [15, 16, 17, 18, 19, 20, 21, 22]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::new_from_hint for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::dummy for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::sponsor for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::get_with_default for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [6, 7, 8]
  Block 3: PCs [9, 10, 11]
  Block 4: PCs [0, 1, 2, 3, 4, 5]
  Block 5: PCs [12, 13, 14]
True branch: 2, False branch: 3
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [12, 13, 14]
Found 1 simple conditionals
Available annotations:
  LiveVarAnnotation: true
  ReachingDefAnnotation: true
Found deterministic convergence point at PC 13 for variable 2 with 2 definitions
Merge point PC: Some(12) -> Convergence: Some(13)
Live variables at merge point: {2}
Live variables at original PC 12: {2}
Live variables at convergence PC 13: {2}
Reaching definitions state at PC 13: ReachingDefState { map: {2: {Alias(1, 7), Alias(7, 12)}}, havoced: {} }
Variable 2 has 2 reaching definitions: {Alias(1, 7), Alias(7, 12)}
Analyzing def at PC 7 in block 2 -> temp 1
Examining bytecode at PC 7: Assign(AttrId(10), 2, 1, Store)
True branch value: temp 1
Analyzing def at PC 12 in block 5 -> temp 7
Examining bytecode at PC 12: Label(AttrId(18), Label(2))
Branch values - True: Some(1), False: None
Variables to merge: []
Conditional merge insertion completed for option::get_with_default
Processing function option::borrow_with_default for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [6, 7, 8]
  Block 3: PCs [9, 10, 11]
  Block 4: PCs [0, 1, 2, 3, 4, 5]
  Block 5: PCs [12, 13, 14]
True branch: 2, False branch: 3
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [12, 13, 14]
Found 1 simple conditionals
Available annotations:
  LiveVarAnnotation: true
  ReachingDefAnnotation: true
Merge point PC: Some(12) -> Convergence: Some(12)
Live variables at merge point: {2}
Live variables at original PC 12: {2}
Live variables at convergence PC 12: {2}
Reaching definitions state at PC 12: ReachingDefState { map: {}, havoced: {} }
Variables to merge: []
Conditional merge insertion completed for option::borrow_with_default
Processing function option::borrow for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [3, 4]
  Block 3: PCs [5, 6, 7, 8]
  Block 4: PCs [0, 1, 2]
  Block 5: PCs [9, 10, 11, 12, 13, 14]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::index_of for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9]
  Block 3: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 4: PCs [10, 11, 12, 13, 14]
  Block 5: PCs [26, 27, 28, 29, 30, 31]
  Block 6: PCs [15, 16, 17, 18, 19]
  Block 7: PCs [20, 21, 22, 23, 24, 25]
True branch: 4, False branch: 5
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9]
  Block 3: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 4: PCs [10, 11, 12, 13, 14]
  Block 5: PCs [26, 27, 28, 29, 30, 31]
  Block 6: PCs [15, 16, 17, 18, 19]
  Block 7: PCs [20, 21, 22, 23, 24, 25]
True branch: 6, False branch: 7
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function vector::contains for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9]
  Block 3: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 4: PCs [10, 11, 12, 13, 14]
  Block 5: PCs [25, 26, 27, 28]
  Block 6: PCs [15, 16, 17, 18]
  Block 7: PCs [19, 20, 21, 22, 23, 24]
True branch: 4, False branch: 5
Selected merge point: block 1
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [7, 8, 9]
  Block 3: PCs [0, 1, 2, 3, 4, 5, 6]
  Block 4: PCs [10, 11, 12, 13, 14]
  Block 5: PCs [25, 26, 27, 28]
  Block 6: PCs [15, 16, 17, 18]
  Block 7: PCs [19, 20, 21, 22, 23, 24]
True branch: 6, False branch: 7
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function option::contains for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function vector::append for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [13, 14, 15]
  Block 3: PCs [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
  Block 4: PCs [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
  Block 5: PCs [27, 28, 29, 30, 31, 32]
True branch: 4, False branch: 5
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [27, 28, 29, 30, 31, 32]
Found 0 simple conditionals
No simple conditionals found
Processing function vector::flatten for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [14, 15, 16]
  Block 3: PCs [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
  Block 4: PCs [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]
  Block 5: PCs [29, 30, 31, 32, 33, 34]
True branch: 4, False branch: 5
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [29, 30, 31, 32, 33, 34]
Found 0 simple conditionals
No simple conditionals found
Processing function option::borrow_mut for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [4, 5]
  Block 3: PCs [6, 7, 8, 9, 10]
  Block 4: PCs [0, 1, 2, 3]
  Block 5: PCs [11, 12, 13, 14, 15, 16, 17]
True branch: 2, False branch: 3
Selected merge point: block 1
Found 0 simple conditionals
No simple conditionals found
Processing function prover::implies for conditional merge insertion
Found potential merge point: block 1 (reachable from both branches)
All blocks in CFG:
  Block 0: No instruction range (dummy)
  Block 1: No instruction range (dummy)
  Block 2: PCs [4, 5, 6, 7]
  Block 3: PCs [8, 9]
  Block 4: PCs [0, 1, 2, 3]
  Block 5: PCs [10, 11, 12]
True branch: 2, False branch: 3
Block 1 is dominated by 5, not immediate
Found potential merge point: block 5 (reachable from both branches)
Selected merge point: block 5
Block 5 contains PCs: [10, 11, 12]
Found 1 simple conditionals
Available annotations:
  LiveVarAnnotation: true
  ReachingDefAnnotation: true
Found deterministic convergence point at PC 10 for variable 2 with 2 definitions
Merge point PC: Some(10) -> Convergence: Some(10)
Live variables at merge point: {2}
Live variables at original PC 10: {2}
Live variables at convergence PC 10: {2}
Reaching definitions state at PC 10: ReachingDefState { map: {2: {Alias(1, 9), Alias(4, 6)}}, havoced: {} }
Variable 2 has 2 reaching definitions: {Alias(1, 9), Alias(4, 6)}
Analyzing def at PC 9 in block 3 -> temp 1
Examining bytecode at PC 9: Assign(AttrId(9), 2, 1, Store)
False branch value: temp 1
Analyzing def at PC 6 in block 2 -> temp 4
Examining bytecode at PC 6: Assign(AttrId(5), 2, 4, Store)
True branch value: temp 4
Branch values - True: Some(4), False: Some(1)
Variables to merge: [VariableToMerge { variable: 2, condition: 3, true_value: 4, false_value: 1, merge_point: 5 }]
About to insert 1 conditionals
Processing variable 2 for insertion
Created IfThenElse call: temp5 = if_then_else(temp3, temp4, temp1)
Inserting IfThenElse at merge point PC 10
Found label at PC 10, inserting if_then_else after it at position 11
Replaced variable 2 with 5 at PC 12: Call(AttrId(15), [], TraceReturn(0), [2], None) -> Call(AttrId(15), [], TraceReturn(0), [5], None)
Replaced variable 2 with 5 at PC 13: Ret(AttrId(12), [2]) -> Ret(AttrId(12), [5])
Successfully inserted conditional for variable 2
Conditional merge insertion completed for prover::implies
Processing function prover::fresh_spec for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function ghost::set_spec for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function prover::val_spec for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function prover::drop_spec for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function prover::ref_spec for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::new for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function prover::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function integer::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function object::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function tx_context::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function option::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function vector::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function ghost::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
Processing function prover::unit_test_poison for conditional merge insertion
Found 0 simple conditionals
No simple conditionals found
🔄 spec_no_abort_check
[1A[2K✅ spec_no_abort_check
🔄 my_ssa_test::conditional_max
[0m[1m[38;5;9merror[0m[1m: prover::asserts conditions are not complete[0m
   [0m[34m┌─[0m ./sources/example.move:4:5
   [0m[34m│[0m  
[0m[34m 4[0m [0m[34m│[0m [0m[31m╭[0m     [0m[31mpublic fun conditional_max(a: u64, b: u64): u64 {[0m
[0m[34m 5[0m [0m[34m│[0m [0m[31m│[0m [0m[31m        let mut r1 = 0;[0m
[0m[34m 6[0m [0m[34m│[0m [0m[31m│[0m [0m[31m        let mut r2 = 100;[0m
[0m[34m 7[0m [0m[34m│[0m [0m[31m│[0m 
[0m[34m 8[0m [0m[34m│[0m [0m[31m│[0m [0m[31m        if (a > b) {[0m
   [0m[34m│[0m [0m[31m│[0m               [0m[34m-[0m [0m[34mabort happened here with execution failure[0m
   [0m[34m·[0m [0m[31m│[0m
[0m[34m15[0m [0m[34m│[0m [0m[31m│[0m [0m[31m        r1 + r2[0m
[0m[34m16[0m [0m[34m│[0m [0m[31m│[0m [0m[31m    }[0m
   [0m[34m│[0m [0m[31m╰[0m[0m[31m─────^[0m
   [0m[34m│[0m  
   [0m[34m=[0m     at ./sources/example.move:4: unit_test_poison
   [0m[34m=[0m         a = 18446744073709551606u64
   [0m[34m=[0m         b = 1142u64
   [0m[34m=[0m     at ./sources/example.move:5: unit_test_poison
   [0m[34m=[0m         r2#1#0 = 100u64
   [0m[34m=[0m     at ./sources/example.move:8: unit_test_poison
   [0m[34m=[0m         ABORTED

❌ my_ssa_test::conditional_max
exiting with verification errors
