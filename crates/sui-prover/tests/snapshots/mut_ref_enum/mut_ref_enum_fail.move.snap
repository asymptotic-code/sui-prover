---
source: crates/sui-prover/tests/integration.rs
expression: output
---
exiting with verification errors
warning: unused variable
   ┌─ tests/inputs/mut_ref_enum/mut_ref_enum_fail.move:14:33
   │
14 │         Color::RGB{mut red, mut green, mut blue} => {
   │                                 ^^^^^ Unused local variable 'green'. Consider removing or prefixing with an underscore: '_green'
   │
   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning: unused variable
   ┌─ tests/inputs/mut_ref_enum/mut_ref_enum_fail.move:29:9
   │
29 │     let before = *color_ref;
   │         ^^^^^^ Unused local variable 'before'. Consider removing or prefixing with an underscore: '_before'
   │
   = This warning can be suppressed with '#[allow(unused_variable)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning: unused 'mut' modifiers
   ┌─ tests/inputs/mut_ref_enum/mut_ref_enum_fail.move:14:44
   │
14 │         Color::RGB{mut red, mut green, mut blue} => {
   │                                        --- ^^^^ The variable 'blue' is never used mutably
   │                                        │    
   │                                        Consider removing the 'mut' declaration here
   │
   = This warning can be suppressed with '#[allow(unused_let_mut)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

warning: unused 'mut' modifiers
   ┌─ tests/inputs/mut_ref_enum/mut_ref_enum_fail.move:14:24
   │
14 │         Color::RGB{mut red, mut green, mut blue} => {
   │                    --- ^^^ The variable 'red' is never used mutably
   │                    │    
   │                    Consider removing the 'mut' declaration here
   │
   = This warning can be suppressed with '#[allow(unused_let_mut)]' applied to the 'module' or module member ('const', 'fun', or 'struct')

error: prover::ensures does not hold
   ┌─ tests/inputs/mut_ref_enum/mut_ref_enum_fail.move:32:5
   │
32 │     ensures(color_ref == Color::RGB{ red: 211, green: 893, blue: 22 });
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │
   =     at tests/inputs/mut_ref_enum/mut_ref_enum_fail.move:28: reset_color_spec
