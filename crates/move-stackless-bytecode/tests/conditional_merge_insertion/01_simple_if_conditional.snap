---
source: crates/move-stackless-bytecode/tests/testsuite.rs
---
============ initial translation from Move ================

[variant baseline]
public fun test::f($t0|a: u64): u64 {
     var $t1|result#1#0: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: $t2 := 0
  1: $t1 := $t2
  2: $t3 := move($t0)
  3: $t4 := 0
  4: $t5 := >($t3, $t4)
  5: if ($t5) goto 6 else goto 12
  6: label L1
  7: $t6 := move($t1)
  8: $t7 := 10
  9: $t8 := *($t6, $t7)
 10: $t1 := $t8
 11: goto 12
 12: label L0
 13: $t9 := move($t1)
 14: return $t9
}

============ after pipeline `conditional_merge_insertion` ================

[variant baseline]
public fun test::f($t0|a: u64): u64 {
     var $t1|result#1#0: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
  0: $t2 := 0
  1: $t1 := $t2
  2: $t3 := 0
  3: $t4 := >($t0, $t3)
  4: if ($t4) goto 5 else goto 8
  5: label L1
  6: $t5 := 10
  7: $t1 := *($t2, $t5)
  8: label L0
     # conditional_merge_insertion: t6 := if_then_else(t4, t1, t2)
  9: $t6 := if_then_else($t4, $t1, $t2)
     # conditional_merge_insertion: merge assign t1 := t6
 10: $t1 := $t6
 11: return $t1
}
