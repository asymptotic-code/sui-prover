---
source: crates/move-stackless-bytecode/tests/testsuite.rs
assertion_line: 260
---
============ initial translation from Move ================

[variant baseline]
fun test::if_then_only($t0|x: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t1 := copy($t0)
  1: $t2 := 5
  2: $t3 := >($t1, $t2)
  3: if ($t3) goto 4 else goto 10
  4: label L1
  5: $t4 := move($t0)
  6: $t5 := 2
  7: $t6 := *($t4, $t5)
  8: $t0 := $t6
  9: goto 10
 10: label L0
 11: $t7 := move($t0)
 12: return $t7
}


[variant baseline]
fun test::simple_if($t0|x: u64): u64 {
     var $t1|tmp#$1: u64
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: u64
  0: $t2 := copy($t0)
  1: $t3 := 10
  2: $t4 := >($t2, $t3)
  3: if ($t4) goto 4 else goto 10
  4: label L1
  5: $t5 := move($t0)
  6: $t6 := 1
  7: $t7 := +($t5, $t6)
  8: $t1 := $t7
  9: goto 16
 10: label L0
 11: $t8 := move($t0)
 12: $t9 := 1
 13: $t10 := -($t8, $t9)
 14: $t1 := $t10
 15: goto 16
 16: label L2
 17: $t11 := move($t1)
 18: return $t11
}

============ after pipeline `control_flow_reconstruction` ================

[variant baseline]
fun test::if_then_only($t0|x: u64): u64 {
     var $t1: u64
     var $t2: bool
     var $t3: u64
  0: $t1 := 5
  1: $t2 := >($t0, $t1)
  2: if ($t2) goto 3 else goto 6
  3: label L1
  4: $t3 := 2
  5: $t0 := *($t0, $t3)
  6: label L0
  7: return $t0
}


[variant baseline]
fun test::simple_if($t0|x: u64): u64 {
     var $t1|tmp#$1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
  0: $t2 := 10
  1: $t3 := >($t0, $t2)
  2: if ($t3) goto 3 else goto 7
  3: label L1
  4: $t4 := 1
  5: $t1 := +($t0, $t4)
  6: goto 10
  7: label L0
  8: $t5 := 1
  9: $t1 := -($t0, $t5)
 10: label L2
 11: return $t1
}


============ Control Flow Reconstruction ================

[variant baseline]
fun test::if_then_only
[
    Basic {
        lower: 0,
        upper: 1,
    },
    IfThenElse {
        cond_at: 2,
        then_branch: Basic {
            lower: 3,
            upper: 5,
        },
        else_branch: None,
    },
    Basic {
        lower: 6,
        upper: 7,
    },
]

[variant baseline]
fun test::simple_if
[
    Basic {
        lower: 0,
        upper: 1,
    },
    IfThenElse {
        cond_at: 2,
        then_branch: Basic {
            lower: 3,
            upper: 5,
        },
        else_branch: Some(
            Basic {
                lower: 7,
                upper: 9,
            },
        ),
    },
    Basic {
        lower: 10,
        upper: 11,
    },
]
